#!/usr/bin/env ruby

require 'json'

class Cookz
  def self.help args
    puts "cookz commands\n\n"
    (Cookz.methods - Object.methods).each do |e|
      puts "  #{e}"
    end
  end

  def self.stats args
    categories = {}
    recipes = `ls retete/`.split("\n")

    keys = [
      ['ciorbă', 'supă'],
      'salată',
      'compot',
      ['mic dejun', 'omletă', 'papară'],
      ['fructe de mare', 'calamari'],
      ['sosuri', 'hrean ras', 'sos trâmbița'],
      ['cuptor'],
      ['garnitură', 'spanac scăzut']
    ]

    recipes.each do |recipe|
      file = File.read("retete/#{recipe}")
      keys.each do |key|
        if key.class == String
          if file.include?(key) || recipe.gsub('_', ' ').include?(key)
            categories[key] = [] unless categories.key?(key)
            categories[key].push recipe
          end
        else
          key.each do |k|
            if file.include?(k) || recipe.gsub('_', ' ').include?(k)
              categories[key[0]] = [] unless categories.key?(key[0])
              categories[key[0]].push recipe
            end
          end
        end
      end
    end

    output = {
      count: recipes.count,
      categories: categories,
      categories_count: {}
    }

    output[:categories].keys.each do |key|
      output[:categories_count][key] = output[:categories][key].count
    end

    puts JSON.pretty_generate(output)
  end

  def self.toc args
    recipes = `ls retete/`.split("\n")

    toc = "# rețete\n"

    recipes.each do |recipe|
      name = recipe.gsub('.md', '').gsub('_', ' ')
      toc += "\n* [#{name}](retete/#{recipe})"
    end
    toc += "\n"

    File.write('REȚETE.md', toc)
  end

  def self.publish args
    Cookz.toc args
    `git add .`
    unless `git ls-files --deleted`.empty?
      `git rm \`git ls-files --deleted\``
    end
    msg_a = args.clone
    msg_a.shift
    msg = msg_a.join(' ')
    `git commit -m "#{msg}"`
    `git push`
  end
end

cookz_methods = Cookz.methods - Object.methods

cookz_methods.each do |meth|
  begin
    throw 'wrong params' if Cookz.method(meth).parameters[0][1] != :args
  rescue
    puts "#{meth} is missing args parameter"
    exit 1
  end
end

if ARGV.length == 0 || !cookz_methods.include?(ARGV[0].to_sym)
  Cookz.help ARGV
  exit 2
end

Cookz.send(ARGV[0], ARGV)
