#!/usr/bin/env ruby

require 'json'

class Cookz
  def self.help args
    puts "cookz commands\n\n"
    (Cookz.methods - Object.methods).each do |e|
      puts "  #{e}"
    end
  end

  def self.stats args
    categories = {}
    recipes = `ls retete/`.split("\n")
    feluri = []

    keys = [
      ['ciorbă', 'supă'],
      ['salată'],
      ['compot'],
      ['mic dejun', 'omletă', 'papară'],
      ['fructe de mare', 'calamari', 'creveți'],
      ['sosuri', 'hrean ras', 'sos trâmbița'],
      ['cuptor'],
      ['garnitură', 'spanac scăzut']
    ]

    recipes.each do |recipe|
      recipe_name = recipe.gsub('_', ' ')

      file = File.read("retete/#{recipe}")
      if recipe.start_with?('feluri_')
        feluri.push recipe
        next
      end
      keys.each do |key|
        key.each do |k|
          if file.include?(k) || recipe_name.include?(k)
            categories[key[0]] = [] unless categories.key?(key[0])
            categories[key[0]].push recipe
          end
        end
      end
    end

    output = {
      count: recipes.count,
      feluri: feluri,
      categories: categories
    }

    categories_markdown = "# categorii\n\n"
    output[:categories].keys.sort.each do |key|
      how_many = output[:categories][key].count
      recipes_string = how_many != 1 ? 'rețete' : 'rețetă'
      categories_markdown += "* **#{key}** *#{how_many} #{recipes_string}*\n"
      output[:categories][key].each do |file|
        name = file.gsub('.md', '').gsub('_', ' ')
        categories_markdown += "  * [#{name}](retete/#{file})\n"
      end
    end

    recipes_string = output[:feluri] != 1 ? 'feluri' : 'fel'
    categories_markdown += "* **util** *#{output[:feluri].size} #{recipes_string}*\n"
    output[:feluri].sort.each do |fel|
      name = fel.gsub('.md', '').gsub('_', ' ')
      categories_markdown += "   * [#{name}](retete/#{fel})\n"
    end

    File.write('CATEGORII.md', categories_markdown)
  end

  def self.toc args
    recipes = `ls retete/`.split("\n")

    toc = "# #{recipes.count} rețete\n"

    recipes.each do |recipe|
      name = recipe.gsub('.md', '').gsub('_', ' ')
      toc += "\n* [#{name}](retete/#{recipe})"
    end
    toc += "\n"

    File.write('REȚETE.md', toc)
  end

  def self.publish args
    Cookz.toc args
    Cookz.stats args
    `git add .`
    unless `git ls-files --deleted`.empty?
      `git rm \`git ls-files --deleted\``
    end
    msg_a = args.clone
    msg_a.shift
    msg = msg_a.join(' ')
    `git commit -m "#{msg}"`
    `git push`
  end
end

cookz_methods = Cookz.methods - Object.methods

cookz_methods.each do |meth|
  begin
    throw 'wrong params' if Cookz.method(meth).parameters[0][1] != :args
  rescue
    puts "#{meth} is missing args parameter"
    exit 1
  end
end

if ARGV.length == 0 || !cookz_methods.include?(ARGV[0].to_sym)
  Cookz.help ARGV
  exit 2
end

Cookz.send(ARGV[0], ARGV)
